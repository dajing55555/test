<?xml version="1.0" encoding="UTF-8"?>
  
<beans  xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:tx="http://www.springframework.org/schema/tx" 
        xmlns:task="http://www.springframework.org/schema/task"  
        xmlns:aop="http://www.springframework.org/schema/aop"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd     
        http://www.springframework.org/schema/context     
        http://www.springframework.org/schema/context/spring-context-4.3.xsd    
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd  
        http://www.springframework.org/schema/task   
        http://www.springframework.org/schema/task/spring-task-4.3.xsd       
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"  
        default-lazy-init="false">  
      
<!--    &lt;!&ndash; Redis 配置 &ndash;&gt;-->
<!--    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--        <property name="maxTotal" value="${redis.pool.maxTotal}" />-->
<!--        <property name="maxIdle" value="${redis.pool.maxIdle}" />-->
<!--        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />-->
<!--        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />-->
<!--        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->
<!--    </bean>-->
<!--    -->
<!--    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
<!--        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />-->
<!--        <constructor-arg name="host" value="${redis.host}" />-->
<!--        <constructor-arg name="port" value="${redis.port}" type="int" />-->
<!--        <constructor-arg name="timeout" value="${redis.pool.maxWaitMillis}" type="int" />-->
<!--        &lt;!&ndash; <constructor-arg name="password" value="#{'${redis.password}'!=''?'${redis.password}':null}" />-->
<!--        <constructor-arg name="database" value="${redis.db.index}" type="int" /> &ndash;&gt;-->
<!--    </bean>-->
<!--    -->
<!--    &lt;!&ndash; JedisCluster 集群高可用配置 &ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--    <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster"> -->
<!--    	<constructor-arg index="0"> -->
<!--    		<set> -->
<!--    			<bean class="redis.clients.jedis.HostAndPort"> -->
<!--    				<constructor-arg index="0" value="${redis.ip1}" /> -->
<!--    				<constructor-arg index="1" value="${redis.port1}" type="int" /> -->
<!--        		</bean> -->
<!--        		<bean class="redis.clients.jedis.HostAndPort"> -->
<!--        			<constructor-arg index="0" value="${redis.ip2}" /> -->
<!--        			<constructor-arg index="1" value="${redis.port2}" type="int" /> -->
<!--        		</bean> -->
<!--        	</set> -->
<!--        </constructor-arg> -->
<!--        <constructor-arg index="1" value="2000" type="int"></constructor-arg> -->
<!--        <constructor-arg index="2" value="100" type="int"></constructor-arg> -->
<!--        <constructor-arg index="3" ref="jedisPoolConfig"></constructor-arg> -->
<!--    </bean> -->
<!--	&ndash;&gt;-->

<!--    &lt;!&ndash;redis Sentinel主从高可用方案配置 &ndash;&gt;-->
<!--    &lt;!&ndash; -->
<!--    <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> -->
<!--        <property name="master"> -->
<!--        	<bean class="org.springframework.data.redis.connection.RedisNode"> -->
<!--        		<property name="name" value="master-1"></property> -->
<!--        	</bean> -->
<!--        </property> -->
<!--        <property name="sentinels"> -->
<!--        	<set> -->
<!--        		<bean class="org.springframework.data.redis.connection.RedisNode"> -->
<!--        			<constructor-arg name="host" value="${sentinel1.ip}"></constructor-arg> -->
<!--        			<constructor-arg name="port" value="${sentinel1.port}"></constructor-arg> -->
<!--        		</bean> -->
<!--        		<bean class="org.springframework.data.redis.connection.RedisNode"> -->
<!--        			<constructor-arg name="host" value="${sentinel2.ip}"></constructor-arg> -->
<!--        			<constructor-arg name="port" value="${sentinel2.port}"></constructor-arg> -->
<!--        		</bean> -->
<!--        	</set> -->
<!--        </property> -->
<!--    </bean> -->
<!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" -->
<!--        p:use-pool="true"> -->
<!--        <property name="password" value="${redis.pass}" /> -->
<!--        <property name="poolConfig"> <ref bean="jedisPoolConfig" /> </property> -->
<!--        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration" /> -->
<!--    </bean> -->
<!--    &ndash;&gt;-->
<!--    -->
<!--    &lt;!&ndash; redis单节点数据库连接配置 &ndash;&gt;-->
<!--    <bean id="jedisConnectionFactory"-->
<!--        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
<!--        <property name="hostName" value="${redis.host}" />-->
<!--        <property name="port" value="${redis.port}" />-->
<!--        &lt;!&ndash; <property name="password" value="${redis.password}" /> &ndash;&gt;-->
<!--        <property name="poolConfig" ref="jedisPoolConfig" />-->
<!--    </bean>-->
<!--    -->
<!--    &lt;!&ndash; 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 &ndash;&gt;-->
<!-- 	<bean id="redisCacheTransfer" class="com.monitor.cache.RedisCacheTransfer">-->
<!--     	<property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>-->
<!--	</bean>-->
<!--    -->
<!--    &lt;!&ndash; redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 &ndash;&gt;-->
<!--    &lt;!&ndash; <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
<!--        <property name="connectionFactory" ref="jedisConnectionFactory" />-->
<!--    </bean> &ndash;&gt;-->
<!--    -->
<!--    &lt;!&ndash; redis相关的注入 &ndash;&gt;-->
<!--    &lt;!&ndash; <bean id="redisDao" class=" com.monitor.dao.RedisDaoImpl" /> &ndash;&gt;-->
        
		
</beans>  